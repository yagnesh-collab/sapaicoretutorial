apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: iris-training-pipeline # executable id, must be unique across all your workflows (YAML files)
  annotations:
    scenarios.ai.sap.com/name: "Iris DataSet Classifier Scenario" # Scenario name should be the use case
    scenarios.ai.sap.com/description: "SAP AI Core tutorial to classify the popular iris datase"

    executables.ai.sap.com/name: "Iris model training" # Executable name should describe the workflow in the use case  
    executables.ai.sap.com/description: "Training with popular iris dataset"
    
    artifacts.ai.sap.com/irisdataset.kind: "dataset" # Helps in suggesting the kind of inputs that can be attached.
    artifacts.ai.sap.com/irismodel.kind: "model" # Helps in suggesting the kind of artifact that can be generated.
  labels:
    scenarios.ai.sap.com/id: "iris-classifier-scenario"
    ai.sap.com/version: "4.0"
spec:
  imagePullSecrets:
    - name: milton-credentials # your docker registry secret
  entrypoint: mypipeline
  arguments:
    parameters: # placeholder for string like inputs
        - name: CLASS_LABEL # identifier local to this workflow
        - name: KERNEL # identifier local to this workflow
  templates:
  - name: mypipeline
    inputs:
      artifacts:  # placeholder for cloud storage attachements
        - name: irisdataset # a name for the placeholder
          path: /app/data/ # where to copy in the Dataset in the Docker image
    outputs:
      artifacts:
        - name: irismodel # local identifier name to the workflow
          globalName: irismodel # name of the artifact generated, and folder name when placed in S3, complete directory will be `../<executaion_id>/irismodel`. Also used above in annotation
          path: /app/model/ # from which folder in docker image (after running workflow step) copy contents to cloud storage
          archive:
            none:   # specify not to compress while uploading to cloud
              {}
    container:
      image: docker.io/miltonc/iris-ai-training-image:03 # Your docker image name
      command: ["/bin/sh", "-c"]
      env:
        - name: CLASS_LABEL # name of the environment variable inside Docker container
          value: "{{workflow.parameters.CLASS_LABEL}}" # value to set from local (to workflow) variable C
        - name: KERNEL # name of the environment variable inside Docker container
          value: "{{workflow.parameters.KERNEL}}" # value to set from local (to workflow) variable kernel
      args:
        - "python /app/src/main.py"
